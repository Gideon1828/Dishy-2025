import React, { useState, useRef, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { useTranslation } from "react-i18next";
import "./Header.css";
import logo from "../assets/logo.png";
import { Link, useNavigate } from "react-router-dom";
import LanguageSwitcher from "../LanguageSwitcher";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faHeart } from "@fortawesome/free-solid-svg-icons";
import axios from "axios";

const Header = () => {
  const { t } = useTranslation();
  const location = useLocation(); // <-- watch route changes

  const [usernames, setUsernames] = useState("");
  const [isLoggedIn, setIsLoggedIn] = useState(() => {
  return localStorage.getItem("isLoggedIn") === "true";
});
const [menuOpen, setMenuOpen] = useState(false);

  const toggleMenu = () => {
    setMenuOpen(!menuOpen);
  };
// search bar
const [dish, setDish] = useState("");
const [cuisine, setCuisine] = useState("");
const navigate = useNavigate();


  useEffect(() => {
  const token = localStorage.getItem("token");
  if (token) {
    axios
      .get("https://dishy-2g4s.onrender.com/working", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((response) => {
        setUsernames(response.data.username);
        setIsLoggedIn(true);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setUsernames("");
        setIsLoggedIn(false);
        localStorage.setItem("isLoggedIn", "false");
      });
  } else {
    setUsernames("");
    setIsLoggedIn(false);
  }
}, [location]);


 
  const name = usernames;
  const user = {
    name: name,
    avatarUrl: "/PhotoProfile.png",
  };

 const handleLogout = () => {
  localStorage.removeItem("token");
  localStorage.setItem("isLoggedIn", "false");
  setIsLoggedIn(false);
};

  const [dropdownVisible, setDropdownVisible] = useState(false);
  const dropdownRef = useRef(null);

  const toggleDropdown = (e) => {
    e.stopPropagation();
    setDropdownVisible((prev) => !prev);
  };

  useEffect(() => {
    const handleClickAnywhere = () => {
      setDropdownVisible(false);
    };
    document.addEventListener("click", handleClickAnywhere);
    return () => {
      document.removeEventListener("click", handleClickAnywhere);
    };
  }, []);

//Search Bar Functionality
const handleSearch = async () => {
  if (cuisine === "") {
    alert("Please select a cuisine before searching!");
    return;
  }

  let url = `https://api.spoonacular.com/recipes/complexSearch?query=${dish}&number=10&apiKey=7eb495e634104e24aa445a2a2d7bf89c`;

  if (cuisine !== "Any") {
    url += `&cuisine=${cuisine}`;
  }

  try {
    const response = await fetch(url);
    const data = await response.json();

    if (data.results.length > 0) {
      navigate("/results", { state: { recipes: data.results } });
    } else {
      alert("No recipes found. Try a different dish name!");
    }
  } catch (error) {
    console.error("Error fetching recipes:", error);
  }
};




  return (
    <header className="header">
      <div className="header-container">
        {/* Logo and Title */}
        <div className="logo-container">
          <img src={logo} alt={t("header.title")} className="logo" />
          <h1 className="title">{t("header.title")}</h1>
        </div>

        {/* Search Bar */}
          {isLoggedIn && (
          <div className="header-search-bar">
          <input
          type="text"
          placeholder="Search Any Dish "
          value={dish}
          onChange={(e) => setDish(e.target.value)}
          />
          
          <select onChange={(e) => setCuisine(e.target.value)} value={cuisine}>
          <option value="">Cuisine</option>
          <option value="Any">Any</option>
          <option value="Indian">Indian</option>
          <option value="Mexican">Mexican</option>
          <option value="Chinese">Chinese</option>
          <option value="Italian">Italian</option>
          <option value="Japanese">Japanese</option>
          <option value="French">French</option>
          <option value="Thai">Thai</option>
          <option value="Mediterranean">Mediterranean</option>
          <option value="Middle Eastern">Middle Eastern</option>
          <option value="Vietnamese">Vietnamese</option>
          <option value="Korean">Korean</option>
          <option value="Burmese">Burmese</option>
          </select>
          <button className="header-submit-btn" onClick={handleSearch}>Search</button>
          </div>
          )
        }

    
    

        {/*  Navigation, Language Switcher, and Profile */}
        <div className="nav-container">
          <nav className="nav">
            {!isLoggedIn ? (
              <>
                <Link to="/" className="nav-link" onClick={handleLogout}>
                  {t("header.nav.home")}
                </Link>
                <Link to="/login" className="nav-link" onClick={handleLogout}>
                  {t("header.nav.login")}
                </Link>
                <Link to="/register" className="nav-link" onClick={handleLogout}>
                  {t("header.nav.register")}
                </Link>
              </>
            ) : (
              <>
                <Link to="/favorite" className="nav-link favorite-link">
                  <FontAwesomeIcon icon={faHeart} /> {t("header.nav.favorites") || "Favorites"}
                </Link>
              </>
            )}
          </nav>
           {/*Language  */}     
          <LanguageSwitcher />
          {/* Profile Section */}
          {isLoggedIn && (
            <div className="profile-section" onClick={toggleDropdown}>
              <img
                src={user.avatarUrl}
                alt="Profile"
                className="profile-icon"
              />
              {dropdownVisible && (
                <div className="profile-dropdown" ref={dropdownRef}>
                  <div className="profile-info">
                    <img
                      src={user.avatarUrl}
                      alt="Profile"
                      className="profile-dropdown-icon"
                    />
                    <span>{user.name}</span>
                  </div>
                  <Link to="/change-password" className="dropdown-item">
                    {t("header.nav.changePassword") || "Change Password"}
                  </Link>
                  {/* Removed Favorites from dropdown as requested */}
                  <Link to="/" onClick={handleLogout} className="btn logout-btn">
                    {t("header.nav.logout") || "Logout"}
                  </Link>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;





.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color:rgb(59, 47, 36);
  padding: 10px 0;
  z-index: 1000;
}

.header-container {
  width: 90%;
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 5px;
}

.logo {
  width: 40px;
  height: 40px;
  object-fit: contain;
}

.title {
  font-family: 'Cursive', sans-serif;
  color: #e0d5c8;
  font-size: 20px;
}

.header-search-bar {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 10px;
  gap: 10px;
  flex-wrap: wrap;
}

.header-search-bar input {
  padding: 10px 100px 10px 10px;
  font-size: 16px;
  border: 2px solid #a67c52;
  border-radius: 6px;
  width: 240px;
}

.header-voice-btn {
  background-color: #614130;
  color: white;
  border: none;
  border-radius: 50%;
  font-size: 16px;
  padding: 6px 10px;
  cursor: pointer;
  transition: 0.3s ease;
}

.header-voice-btn:hover {
  background-color: #a67c52;
  transform: scale(1.1);
}

.header-voice-btn.clicked {
  background-color: #d65e0f !important;
  transform: scale(0.9);
}

.header-search-bar select,
.header-submit-btn {
  padding: 10px 14px;
  font-size: 16px;
  border: none;
  border-radius: 6px;
  background-color: #5c3d2e;
  color: white;
  cursor: pointer;
}

.header-search-bar select:hover,
.header-submit-btn:hover {
  background-color: #a67c52;
}


.nav-container {
  display: flex;
  align-items: center;
  gap: 20px;
}

.nav {
  display: flex;
  gap: 20px;
}

.nav-link {
  font-family: 'Cursive', sans-serif;
  color: #e0d5c8;
  text-decoration: none;
  font-size: 18px;
}

.nav-link:hover {
  text-decoration: underline;
}

.language-switcher {
  font-family: 'Cursive', sans-serif;
  color: #e0d5c8;
  background-color: transparent;
  font-size: 18px;
  border: none;
  outline: none;
  cursor: pointer;
}

/* Remove default arrow for IE */
.language-switcher::-ms-expand {
  display: none;
}

/* Profile Section */
.profile-section {
  position: relative;
  display: flex;
  align-items: center;
  margin-left: 20px;
  cursor: pointer;
}

.profile-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

/* Dropdown */
.profile-dropdown {
  position: absolute;
  top: 50px;
  right: 0;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 6px;
  width: 200px;
  padding: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  z-index: 1000;
}

.profile-info {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.profile-dropdown-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 10px;
}

/* Dropdown Items */
.dropdown-item {
  display: block;
  padding: 10px 15px;
  color: #333;
  text-decoration: none;
  font-size: 16px;
  transition: background-color 0.2s, color 0.2s;
  border-radius: 4px;
}

.dropdown-item:hover {
  background-color: #5c3d2e;
  color: #fff;
  text-decoration: none;
}

/* Logout Button */
.btn {
  display: block;
  padding: 10px 25px;
  color: #333;
  text-decoration: none;
  font-size: 16px;
  transition: background-color 0.2s, color 0.2s;
  border-radius: 4px;
}

.btn:hover {
  background-color: #5c3d2e;
  color: #fff;
  text-decoration: none;
}

.dropdown-icon {
  margin-right: 8px; /* Adjust spacing between icon and text */
  color: #5c3d2e; /* Adjust icon color as desired */
}
.dropdown-icon:hover {
  margin-right: 8px; /* Adjust spacing between icon and text */
  color: #fff; /* Adjust icon color as desired */
}


